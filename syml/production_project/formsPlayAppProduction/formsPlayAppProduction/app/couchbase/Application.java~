package controllers;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;

import org.json.JSONObject;

import com.sendwithus.SendWithUsExample;
import couchbase.CouchBaseOperation;

import helper.GenericHelperClass;

import openerp.CheckReferalResource;

import openerp.ReferalCreateLead;

import play.*;

import static play.data.Form.form;
import play.data.DynamicForm;
import play.mvc.*;

import views.html.*;

public class Application extends Controller {

	public static Result index() {

		// String referralId=request().getQueryString("referralId");
	Logger.debug("device type "+request().getHeader("User-Agent"));	

		return ok("Welocme");
	}

	public static Result indexNotVedio() throws UnknownHostException {

		String referralId = request().getQueryString("referralId");
		String firstName="";
		String lastName="";
		String email="";
		try{
			ArrayList<String> list=new CouchBaseOperation().getReferralData(referralId);
			if(list.size()!=0){
				firstName=list.get(2);
				lastName=list.get(3);
				email=list.get(1);
			}
			
		}catch(Exception e){
			
		}
		System.out.println("user address "+InetAddress.getLocalHost());
		return ok(submitreferral.render(referralId, "", "", "", "", "", "", "",firstName,lastName,email));
	}

	public static Result indexV() {
		String referralId = request().getQueryString("referralId");
		System.out.println("referel id" + referralId);
		String firstName="";
		String lastName="";
		String email="";
		try{
			ArrayList<String> list=new CouchBaseOperation().getReferralData(referralId);
			if(list.size()!=0){
				firstName=list.get(2);
				lastName=list.get(3);
				email=list.get(1);
			}
			
		}catch(Exception e){
			
		}
		return ok(submitreferralV
				.render(referralId, "", "", "", "", "", "", "",firstName,lastName,email));
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static Result submitReferral() {
		SendWithUsExample sendWithus = new SendWithUsExample();
		String formType = "Submit Referral";

		DynamicForm dynamicForm = form().bindFromRequest();
		String referralid = dynamicForm.get("referralId");
		System.out.println("referel id===========" + referralid);
		String ip = dynamicForm.get("ip");

		System.out.println("ip----------------"+ip);
		String leadFirstName = dynamicForm.get("fname");
		String leadLastName = dynamicForm.get("lname");
		String leadPhoneNumber = dynamicForm.get("phone");

		String leadEmail = dynamicForm.get("email");
		String leadAddress = dynamicForm.get("formatted_address");

		String referralFirstName = dynamicForm.get("reffirstname");
		String referralLastName = dynamicForm.get("reflastname");
		String referralEmail = dynamicForm.get("refemail");
		String leadFNameRequired = "";
		String leadLNameRequired = "";
		String leadPhoneNumberRequired = "";
		String leadEmailRequired = "";
		String refFnameRequired = "";

		String refLnameRequired = "";

		String refEmailRequired = "";

		boolean sucess = true;

		if (leadLastName != null && leadLastName.isEmpty()) {
			leadFNameRequired = "FirstName Required";
			sucess = false;
		}

		if (leadLastName != null && leadLastName.isEmpty()) {
			leadLNameRequired = "LastName Required";
			sucess = false;

		}

		if (leadPhoneNumber != null && leadPhoneNumber.isEmpty()) {
			leadPhoneNumberRequired = "PhoneNumber Required";
			sucess = false;

		}
		if (leadEmail != null && leadEmail.isEmpty()) {
			leadEmailRequired = "Email Required";
			sucess = false;

		}

		if (referralFirstName != null && referralFirstName.isEmpty()) {
			refFnameRequired = "Your FirstName Required";
			sucess = false;

		}

		if (referralLastName != null && referralLastName.isEmpty()) {
			refEmailRequired = "Your LastName Required";
			sucess = false;

		}

		if (referralEmail != null && referralEmail.isEmpty()) {
			refEmailRequired = "Your Email ID Required";
			sucess = false;

		}

		System.out.println("inside Submitreferraform Controller ");

		System.out.println("leadFirstName  : " + leadFirstName
				+ "  leadLastName : " + leadLastName + "  leadPhoneNumber : "
				+ leadPhoneNumber + " leadEmail : " + leadEmail
				+ " leadAddress : " + leadAddress + "  referralFirstName : "
				+ referralFirstName + " referralEmail : " + referralEmail);
		String message = "";

		if (sucess) {
			HashMap dataStoreValue = new HashMap();
			ArrayList<String> sucessList = null;
			int sucessMessage = 0;
			CheckReferalResource referalResource = new CheckReferalResource();

			String phoneNumber = "";
			if (referralid != null && !referralid.isEmpty()) {
				dataStoreValue.put("referralIdFound", referralid);
				phoneNumber = referalResource
						.getReferralPhoneNumber(referralid);
			} else {
				sucessList = referalResource
						.findReferralSourceCode(referralEmail);
				try {

					try {
						sucessMessage = Integer.parseInt(sucessList.get(1));
					} catch (Exception e) {

					}
					try {
						referralid = sucessList.get(2);
					} catch (Exception e) {

					}
					try {
						phoneNumber = sucessList.get(0);
					} catch (Exception e) {

					}
				} catch (Exception e) {

				}

			}

			// display sucess message
			if (sucessMessage == 0) {
				message = "Thank you for verifying your involvement in Visdom's Referral Program. We have sent an email to you confirming the beginning of the mortgage application process for your referral.  In the event you did not receive it, please check the spam folder and mark all emails from Visdom as Not Spam.  Thank You.";

			} else if (sucessMessage == 1 || sucessMessage == 2) {
				message = "Thank you for verifying your involvement in Visdom's Referral Program. We have sent an email to you confirming the beginning of the mortgage application process for your referral.  In the event you did not receive it, please check the spam folder and mark all emails from Visdom as Not Spam.  Thank You.";

			} else {
				message = "Your email address does not match our records.  Please confirm email address provided when you became a involved in Visdoms Referral Program.  If your email address has changed, please send an email to referrals@visdom.ca with all your correct contact information so we can adjust our records accordingly and pay appropriate referral fees.";

			}
			CouchBaseOperation storeData = new CouchBaseOperation();

			dataStoreValue.put("Referal_Source_FirstName", referralFirstName);
			dataStoreValue.put("Referal_Source_LastName", referralLastName);
			dataStoreValue.put("Referal_Source_Email",
					referralEmail.toLowerCase());

			dataStoreValue.put("FirstName_of_referal", leadFirstName);
			dataStoreValue.put("LastName_of_referal", leadLastName);
			dataStoreValue.put("phoneNumber_of_referal", leadPhoneNumber);
			dataStoreValue.put("Email_of_referal", leadEmail);
			dataStoreValue.put("Submission_Date_Time", "");
			dataStoreValue.put("address_of_referal", leadAddress);
			dataStoreValue.put("ip", request().remoteAddress());
			dataStoreValue.put("Type", "Lead");

			ReferalCreateLead referalCreateLead = new ReferalCreateLead();

			int code = 0;
			int id = 0;
			try {

				ArrayList list = referalCreateLead
						.checkAndCreateLead(dataStoreValue);
				code = (Integer) list.get(0);

				id = (Integer) list.get(1);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				code = 3;

			}

			String key = formType + "_" + id;

			if (code == 1) {

				org.codehaus.jettison.json.JSONObject jsonTableData = new org.codehaus.jettison.json.JSONObject();
				try {
					jsonTableData.put("leadid", id);
					jsonTableData.put("leadName", leadFirstName + "_"
							+ leadLastName);
					jsonTableData.put("leadPhone", leadPhoneNumber);
					jsonTableData.put("leadReferralName", referralFirstName
							+ " " + referralLastName);
					jsonTableData.put("leadReferralPhone", phoneNumber);

				} catch (org.codehaus.jettison.json.JSONException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}

				// log.debug("calling taskcretion appppppppppp------------->");
				// new
				// LeadTaskCreationRestcall(jsonTableData.toString()).start();
				try {
					sendWithus.sendTOreferalSubmittedReferral(leadFirstName,
							referralFirstName, referralEmail);
				} catch (Exception e) {
					System.out.println("error in sending mail " + e);
				}

				// ConfirmEmailOfReferringLeadMessageTemplate.ConfirmEmailOfReferringLeadMessageTemplateMethod(form1Fname,form1Email,
				// refFirstName, refLastName, refEmail,message,id,"crm.lead");

				storeData.storeDataInCouchBase(key, formType, dataStoreValue);
				try {
					JSONObject jsonObject = storeData.getData(key);
					if (jsonObject != null) {
						new GenericHelperClass(id, jsonObject).start();
					}
				} catch (Exception e) {
					System.out
							.println("error in adding couchbas data to notes");
				}
			} else if (code == 2) {

				message = "The Lead already exsist with your enterd details";
				storeData.storeDataInCouchBase(key, formType, dataStoreValue);

			} else if (code == 3) {
				message = "Error in creating Lead please fill the form once again";
			}

			return ok(leadsucess.render(message));

		} else {
			return ok(submitreferral.render(referralid, leadFNameRequired,
					leadLNameRequired, leadPhoneNumberRequired,
					leadEmailRequired, refFnameRequired, refLnameRequired,
					refEmailRequired,"","",""));

		}
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static Result submitReferralV() {
		SendWithUsExample sendWithus = new SendWithUsExample();
		String formType = "Submit Referral";

		DynamicForm dynamicForm = form().bindFromRequest();
		String referralid = dynamicForm.get("referralId");
		System.out.println("referel id===========" + referralid);

		String leadFirstName = dynamicForm.get("fname");
		String leadLastName = dynamicForm.get("lname");
		String leadPhoneNumber = dynamicForm.get("phone");

		String leadEmail = dynamicForm.get("email");
		String leadAddress = dynamicForm.get("formatted_address");

		String referralFirstName = dynamicForm.get("reffirstname");
		String referralLastName = dynamicForm.get("reflastname");
		String referralEmail = dynamicForm.get("refemail");
		String leadFNameRequired = "";
		String leadLNameRequired = "";
		String leadPhoneNumberRequired = "";
		String leadEmailRequired = "";
		String refFnameRequired = "";

		String refLnameRequired = "";

		String refEmailRequired = "";

		boolean sucess = true;

		if (leadLastName != null && leadLastName.isEmpty()) {
			leadFNameRequired = "FirstName Required";
			sucess = false;
		}

		if (leadLastName != null && leadLastName.isEmpty()) {
			leadLNameRequired = "LastName Required";
			sucess = false;

		}

		if (leadPhoneNumber != null && leadPhoneNumber.isEmpty()) {
			leadPhoneNumberRequired = "PhoneNumber Required";
			sucess = false;

		}
		if (leadEmail != null && leadEmail.isEmpty()) {
			leadEmailRequired = "Email Required";
			sucess = false;

		}

		if (referralFirstName != null && referralFirstName.isEmpty()) {
			refFnameRequired = "Your FirstName Required";
			sucess = false;

		}

		if (referralLastName != null && referralLastName.isEmpty()) {
			refEmailRequired = "Your LastName Required";
			sucess = false;

		}

		if (referralEmail != null && referralEmail.isEmpty()) {
			refEmailRequired = "Your Email ID Required";
			sucess = false;

		}

		System.out.println("inside Submitreferraform Controller ");

		System.out.println("leadFirstName  : " + leadFirstName
				+ "  leadLastName : " + leadLastName + "  leadPhoneNumber : "
				+ leadPhoneNumber + " leadEmail : " + leadEmail
				+ " leadAddress : " + leadAddress + "  referralFirstName : "
				+ referralFirstName + " referralEmail : " + referralEmail);
		String message = "";

		if (sucess) {
			HashMap dataStoreValue = new HashMap();
			ArrayList<String> sucessList = null;
			int sucessMessage = 0;
			CheckReferalResource referalResource = new CheckReferalResource();

			String phoneNumber = "";
			if (referralid != null && !referralid.isEmpty()) {
				dataStoreValue.put("referralIdFound", referralid);
				phoneNumber = referalResource
						.getReferralPhoneNumber(referralid);
				if (phoneNumber != null && phoneNumber.isEmpty()) {
					sucessList = referalResource
							.findReferralSourceCode(referralEmail);

				} else if (phoneNumber == null) {
					sucessList = referalResource
							.findReferralSourceCode(referralEmail);

				}
			} else {
				sucessList = referalResource
						.findReferralSourceCode(referralEmail);

			}

			try {

				try {
					sucessMessage = Integer.parseInt(sucessList.get(1));
				} catch (Exception e) {

				}
				try {
					referralid = sucessList.get(2);
				} catch (Exception e) {

				}
				try {
					phoneNumber = sucessList.get(0);
				} catch (Exception e) {

				}
			} catch (Exception e) {

			}

			// display sucess message
			if (sucessMessage == 0) {
				message = "Thank you for verifying your involvement in Visdom's Referral Program. We have sent an email to you confirming the beginning of the mortgage application process for your referral.  In the event you did not receive it, please check the spam folder and mark all emails from Visdom as Not Spam.  Thank You.";

			} else if (sucessMessage == 1 || sucessMessage == 2) {
				message = "Thank you for verifying your involvement in Visdom's Referral Program. We have sent an email to you confirming the beginning of the mortgage application process for your referral.  In the event you did not receive it, please check the spam folder and mark all emails from Visdom as Not Spam.  Thank You.";

			} else {
				message = "Your email address does not match our records.  Please confirm email address provided when you became a involved in Visdoms Referral Program.  If your email address has changed, please send an email to referrals@visdom.ca with all your correct contact information so we can adjust our records accordingly and pay appropriate referral fees.";

			}
			CouchBaseOperation storeData = new CouchBaseOperation();

			dataStoreValue.put("Referal_Source_FirstName", referralFirstName);
			dataStoreValue.put("Referal_Source_LastName", referralLastName);
			dataStoreValue.put("Referal_Source_Email",
					referralEmail.toLowerCase());

			dataStoreValue.put("FirstName_of_referal", leadFirstName);
			dataStoreValue.put("LastName_of_referal", leadLastName);
			dataStoreValue.put("phoneNumber_of_referal", leadPhoneNumber);
			dataStoreValue.put("Email_of_referal", leadEmail);
			dataStoreValue.put("Submission_Date_Time", "");
			dataStoreValue.put("address_of_referal", leadAddress);
			dataStoreValue.put("ip", request().remoteAddress());
			dataStoreValue.put("Type", "Lead");

			ReferalCreateLead referalCreateLead = new ReferalCreateLead();

			int code = 0;
			int id = 0;
			try {

				ArrayList list = referalCreateLead
						.checkAndCreateLead(dataStoreValue);
				code = (Integer) list.get(0);

				id = (Integer) list.get(1);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				code = 3;

			}

			String key = formType + "_" + id;

			if (code == 1) {

				org.codehaus.jettison.json.JSONObject jsonTableData = new org.codehaus.jettison.json.JSONObject();
				try {
					jsonTableData.put("leadid", id);
					jsonTableData.put("leadName", leadFirstName + "_"
							+ leadLastName);
					jsonTableData.put("leadPhone", leadPhoneNumber);
					jsonTableData.put("leadReferralName", referralFirstName
							+ " " + referralLastName);
					jsonTableData.put("leadReferralPhone", phoneNumber);

				} catch (org.codehaus.jettison.json.JSONException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}

				// log.debug("calling taskcretion appppppppppp------------->");
				// new
				// LeadTaskCreationRestcall(jsonTableData.toString()).start();
				try {
					sendWithus.sendTOreferalSubmittedReferral(leadFirstName,
							referralFirstName, referralEmail);
				} catch (Exception e) {
					System.out.println("error in sending mail " + e);
				}

				// ConfirmEmailOfReferringLeadMessageTemplate.ConfirmEmailOfReferringLeadMessageTemplateMethod(form1Fname,form1Email,
				// refFirstName, refLastName, refEmail,message,id,"crm.lead");

				storeData.storeDataInCouchBase(key, formType, dataStoreValue);
				try {
					JSONObject jsonObject = storeData.getData(key);
					if (jsonObject != null) {
						new GenericHelperClass(id, jsonObject).start();
					}
				} catch (Exception e) {
					System.out
							.println("error in adding couchbas data to notes");
				}
			} else if (code == 2) {

				message = "The Lead already exsist with your enterd details";
				storeData.storeDataInCouchBase(key, formType, dataStoreValue);

			} else if (code == 3) {
				message = "Error in creating Lead please fill the form once again";
			}

			return ok(leadsucess.render(message));

		} else {
			return ok(submitreferralV.render(referralid, leadFNameRequired,
					leadLNameRequired, leadPhoneNumberRequired,
					leadEmailRequired, refFnameRequired, refLnameRequired,
					refEmailRequired,"","",""));

		}

	}

	public static Result visdomReferral() {
		Logger.debug("testtststs");
		return ok(visdomferral.render("sucess"));
	}

}
